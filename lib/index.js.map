{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const { Subject, ReplaySubject } = require('rxjs')\nconst { distinctUntilChanged, multicast, map, shareReplay, concatMap, take } = require('rxjs/operators')\n\nclass ObservableStore {\n  static VERSION = require('../package.json').version\n\n  constructor (initialState = {}) {\n    this.change$ = new Subject()\n    this.state$ = new ReplaySubject(1)\n\n    this.mergedChange$ = this.change$.pipe(\n      concatMap(change => this.state$.pipe(\n        take(1),\n        map(currentState => {\n          const newState = { ...currentState, ...change }\n          return [currentState, newState, change]\n        })\n      )),\n      shareReplay(1)\n    )\n\n    this.currentState$ = this.mergedChange$.pipe(\n      map(([prevState, newState, change]) => newState),\n      shareReplay(1)\n    )\n\n    this.applyChange$ = this.currentState$.pipe(\n      shareReplay(1),\n      multicast(this.state$)\n    )\n\n    this.state$.next({})\n    this.applyChange$.connect()\n  }\n\n  getState () {\n    let state\n    this.state$.pipe(\n      take(1)\n    ).subscribe(_state => {\n      state = _state\n    })\n    return state\n  }\n\n  setState (patch) {\n    this.change$.next(patch)\n  }\n\n  getState$ () {\n    return this.newState$.asObservable()\n  }\n\n  asObservable (selector = null) {\n    let state$ = this.currentState$\n    if (selector) {\n      state$ = state$.pipe(this._createFilter(selector))\n    }\n    return state$.asObservable()\n  }\n\n  subscribe (listener) {\n    return this.mergedChange$.subscribe(params => {\n      listener(...params)\n    })\n  }\n\n  _createFilter (selector) {\n    const empty = {}\n    const selectorParts = selector.split('.')\n    const extract = input =>\n      selectorParts\n        .reduce((acc, cur) => acc[cur] || empty, input)\n\n    return input$ => input$.pipe(\n      map(input => extract(input)),\n      distinctUntilChanged()\n    )\n  }\n}\n\nmodule.exports = function observableStore (initialState) {\n  return new ObservableStore()\n}\n"]}