{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;eAA+B,OAAO,CAAC,MAAD,C;IAA9B,E,YAAA,E;IAAI,K,YAAA,K;IAAO,O,YAAA,O;;gBAC2B,OAAO,CAAC,gBAAD,C;IAA7C,G,aAAA,G;IAAK,W,aAAA,W;IAAa,S,aAAA,S;IAAW,I,aAAA,I;;IAE/B,e;;;AAGJ,6BAAe;AAAA;;AACb,SAAK,OAAL,GAAe,IAAI,OAAJ,EAAf;AAEA,SAAK,YAAL,GAAoB,KAAK,OAAL,CAAa,IAAb,CAClB,SAAS,CAAC,UAAA,KAAK;AAAA,aAAI,KAAI,CAAC,MAAL,CAAY,IAAZ,CACjB,GAAG,CAAC,UAAA,YAAY,EAAI;AAClB,YAAM,QAAQ,gBACT,YADS,MAET,KAFS,CAAd;;AAIA,eAAO,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,CAAP;AACD,OANE,CADc,EAQjB,IAAI,CAAC,CAAD,CARa,CAAJ;AAAA,KAAN,CADS,CAApB;AAaA,SAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAClB,GAAG,CAAC;AAAA,UAAE,YAAF;AAAA,UAAgB,QAAhB;AAAA,UAA0B,KAA1B;AAAA,aAAqC,QAArC;AAAA,KAAD,CADe,CAApB;AAIA,SAAK,MAAL,GAAc,KAAK,CACjB,EAAE,CAAC,EAAD,CADe,EAEjB,KAAK,YAFY,CAAL,CAGZ,IAHY,CAIZ,WAAW,CAAC,CAAD,CAJC,CAAd;AAMD;;;;SAED,Q,GAAA,oBAAY;AACV,QAAI,KAAJ;AACA,QAAM,GAAG,GAAG,KAAK,MAAL,CAAY,IAAZ,CACV,IAAI,CAAC,CAAD,CADM,EAEV,SAFU,CAEA,UAAA,MAAM,EAAI;AACpB,MAAA,KAAK,GAAG,MAAR;AACD,KAJW,CAAZ;AAKA,IAAA,GAAG,CAAC,WAAJ;AACA,WAAO,KAAP;AACD,G;;SAED,Q,GAAA,kBAAU,KAAV,EAAiB;AACf,SAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACD,G;;SAED,S,GAAA,qBAAa;AACX,WAAO,KAAK,MAAL,CAAY,YAAZ,EAAP;AACD,G;;SAED,S,GAAA,mBAAW,QAAX,EAAqB;AACnB,WAAO,KAAK,YAAL,CAAkB,SAAlB,CAA4B;AAAA,UAAE,YAAF;AAAA,UAAgB,QAAhB;AAAA,UAA0B,KAA1B;AAAA,aACjC,QAAQ,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,CADyB;AAAA,KAA5B,CAAP;AAGD,G;;;;;AAtDG,e,CACG,O,GAAU,OAAO,CAAC,iBAAD,CAAP,CAA2B,O;;AAwD9C,MAAM,CAAC,OAAP,GAAiB,SAAS,eAAT,GAA4B;AAC3C,SAAO,IAAI,eAAJ,EAAP;AACD,CAFD","file":"index.js","sourcesContent":["const { of, merge, Subject } = require('rxjs')\nconst { map, shareReplay, switchMap, take } = require('rxjs/operators')\n\nclass ObservableStore {\n  static VERSION = require('../package.json').version\n\n  constructor () {\n    this.change$ = new Subject()\n\n    this.buildChange$ = this.change$.pipe(\n      switchMap(patch => this.state$.pipe(\n        map(currentState => {\n          const newState = {\n            ...currentState,\n            ...patch\n          }\n          return [currentState, newState, patch]\n        }),\n        take(1)\n      ))\n    )\n\n    this.mergeChange$ = this.buildChange$.pipe(\n      map(([currentState, newState, patch]) => newState)\n    )\n\n    this.state$ = merge(\n      of({}),\n      this.mergeChange$\n    ).pipe(\n      shareReplay(1)\n    )\n  }\n\n  getState () {\n    let state\n    const sub = this.state$.pipe(\n      take(1)\n    ).subscribe(_state => {\n      state = _state\n    })\n    sub.unsubscribe()\n    return state\n  }\n\n  setState (patch) {\n    this.change$.next(patch)\n  }\n\n  getState$ () {\n    return this.state$.asObservable()\n  }\n\n  subscribe (listener) {\n    return this.buildChange$.subscribe(([currentState, newState, patch]) =>\n      listener(currentState, newState, patch)\n    )\n  }\n}\n\nmodule.exports = function observableStore () {\n  return new ObservableStore()\n}\n"]}