{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const { Subject, ReplaySubject } = require('rxjs')\nconst { share, multicast, map, tap, shareReplay, concatMap, take } = require('rxjs/operators')\n\nclass ObservableStore {\n  static VERSION = require('../package.json').version\n\n  constructor (initialState = {}) {\n    this.change$ = new Subject()\n    this.state$ = new ReplaySubject(1)\n\n    this.mergedChange$ = this.change$.pipe(\n      concatMap(change => this.state$.pipe(\n        take(1),\n        map(currentState => {\n          const newState = { ...currentState, ...change }\n          return [currentState, newState, change]\n        }),\n        tap(change => console.log('CHANGE', change))\n      )),\n      shareReplay(1)\n    )\n\n    this.currentState$ = this.mergedChange$.pipe(\n      map(([prevState, newState, change]) => newState),\n      share()\n    )\n\n    this.applyChange$ = this.currentState$.pipe(\n      shareReplay(1),\n      multicast(this.state$)\n    )\n\n    this.state$.next({})\n    this.applyChange$.connect()\n  }\n\n  getState () {\n    let state\n    const sub = this.state$.pipe(\n      take(1)\n    ).subscribe(_state => {\n      state = _state\n    })\n    sub.unsubscribe()\n    return state\n  }\n\n  setState (patch) {\n    this.change$.next(patch)\n  }\n\n  getState$ () {\n    return this.newState$.asObservable()\n  }\n\n  asObservable () {\n    return this.currentState$.asObservable()\n  }\n\n  subscribe (listener) {\n    return this.mergedChange$.subscribe(params => {\n      listener(...params)\n    })\n  }\n}\n\nclass FuckinDumbStore {\n  constructor () {\n    this.stort = {}\n    this.listeners = []\n  }\n\n  getState () {\n    return this.stort\n  }\n\n  setState (patch) {\n    console.log('SET', patch)\n    const oldState = { ...this.stort }\n    const newState = {\n      ...oldState,\n      ...patch\n    }\n    this.stort = newState\n    this._publish(oldState, newState, patch)\n  }\n\n  _publish (...args) {\n    console.log('PUBLISH', args)\n    this.listeners.forEach(listener => listener(...args))\n  }\n\n  subscribe (listener) {\n    this.listeners.push(listener)\n    return () => {\n      this.listeners.splice(this.listeners.indexOf(listener))\n    }\n  }\n}\n\nmodule.exports = function observableStore (initialState) {\n  return new ObservableStore()\n  // return new FuckinDumbStore()\n}\n"]}